/**
 * @file snake_fsm.cpp
 * @brief –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω–µ—á–Ω–æ–≥–æ –∞–≤—Ç–æ–º–∞—Ç–∞ (FSM) –¥–ª—è –∏–≥—Ä—ã Snake.
 *
 * FSM –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞ –∏
 * —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –∏–≥—Ä—ã Snake (—á–µ—Ä–µ–∑ SnakeGame).
 *
 * –û—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏:
 * - –∑–∞–ø—É—Å–∫ –Ω–æ–≤–æ–π –∏–≥—Ä—ã –∏ —Ä–µ—Å—Ç–∞—Ä—Ç;
 * - –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–≥—Ä—ã –Ω–∞ –ø–∞—É–∑—É –∏ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ;
 * - –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–≥—Ä—ã;
 * - –∏–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–≤–∏–∂–µ–Ω–∏—è –∑–º–µ–π–∫–∏;
 * - —É—Å–∫–æ—Ä–µ–Ω–∏–µ –∑–º–µ–π–∫–∏ –ø—Ä–∏ —É–¥–µ—Ä–∂–∞–Ω–∏–∏ –∫–Ω–æ–ø–∫–∏.
 */
#include "../../../include/brickgame/snake/snake_fsm.hpp"

namespace s21 {

/**
 * @brief –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä FSM –¥–ª—è Snake.
 *
 * @param game —Å—Å—ã–ª–∫–∞ –Ω–∞ SnakeGame, –∫–æ—Ç–æ—Ä—ã–º —É–ø—Ä–∞–≤–ª—è–µ—Ç FSM.
 */
SnakeFSM::SnakeFSM(SnakeGame& game) : game_(game) {}
/**
 * @brief –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –≤–≤–æ–¥ –∏ –º–µ–Ω—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã.
 *
 * –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è SnakeGame –∏ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –ø–µ—Ä–µ—Ö–æ–¥—ã –∏ –≤—ã–∑–æ–≤—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –º–µ—Ç–æ–¥–æ–≤:
 * - Start: –∑–∞–ø—É—Å–∫ –Ω–æ–≤–æ–π –∏–≥—Ä—ã –∏–ª–∏ —Ä–µ—Å—Ç–∞—Ä—Ç –ø–æ—Å–ª–µ –ø–æ–±–µ–¥—ã/–ø–æ—Ä–∞–∂–µ–Ω–∏—è;
 * - Pause: –ø–∞—É–∑–∞ –∏ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ;
 * - Terminate: –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–≥—Ä—ã;
 * - Up/Down/Left/Right: —Å–º–µ–Ω–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–º–µ–π–∫–∏;
 * - Action: —É—Å–∫–æ—Ä–µ–Ω–∏–µ (–ø—Ä–∏ —É–¥–µ—Ä–∂–∞–Ω–∏–∏ –∫–Ω–æ–ø–∫–∏).
 *
 * @param action –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (Start, Pause, Terminate –∏ —Ç.–¥.)
 * @param hold –ø—Ä–∏–∑–Ω–∞–∫ —É–¥–µ—Ä–∂–∞–Ω–∏—è –∫–Ω–æ–ø–∫–∏ (–∞–∫—Ç—É–∞–ª—å–Ω–æ –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è).
 */
void SnakeFSM::HandleInput(UserAction_t action, bool hold) {
  switch (action) {
    case Start:
      if (game_.GetState() == SnakeGameState::Ready ||
          game_.GetState() == SnakeGameState::Lost ||
          game_.GetState() == SnakeGameState::Won) {
        game_.Reset();
        game_.Resume();
      }
      break;
    case Pause:
      if (game_.GetState() == SnakeGameState::Running) {
        game_.Pause();
      } else if (game_.GetState() == SnakeGameState::Paused) {
        game_.Resume();
      }
      break;
    case Terminate:
      game_.Terminate();
      break;
    case Up:
    case Down:
    case Left:
    case Right:
      game_.ChangeDirection(action, hold);  // üéØ –ü–µ—Ä–µ–¥–∞–µ–º hold –≤ ChangeDirection
      break;
    case Action:
      game_.Accelerate(hold);
      break;
    default:
      break;
  }
}

}  // namespace s21
